syntax = "proto3";
package proto;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// ----------------------------------------------------------------------------
// gRPC service
// ----------------------------------------------------------------------------

// IAVLService defines the gRPC service API contract for the IAVL tree.
service IAVLService {
  // Has returns a boolean result for a given key query in a versioned IAVL tree.
  rpc Has(HasRequest) returns (HasResponse) {
    option (google.api.http) = {
      get: "/v1/tree/{version}/has"
    };
  }

  // Get returns a result containing the IAVL tree version and value for a given key
  // query in a versioned IAVL tree.
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/v1/tree/{version}/get"
    };
  }

  // Set returns a result after inserting a key/value pair into the IAVL tree
  // based on the current state of the tree.
  rpc Set(SetRequest) returns (SetResponse) {
    option (google.api.http) = {
      post: "/v1/tree/set"
      body: "*"
    };
  }

  // Remove returns a result after removing a key/value pair from the IAVL tree
  // based on the current state of the tree.
  rpc Remove(RemoveRequest) returns (RemoveResponse) {
    option (google.api.http) = {
      post: "/v1/tree/remove"
      body: "*"
    };
  }

  // SaveVersion saves a new IAVL tree version to disk based on the current state of
  // the tree. It returns the hash and new version number.
  rpc SaveVersion(google.protobuf.Empty) returns (SaveVersionResponse) {
    option (google.api.http) = {
      post: "/v1/tree/save_version"
      body: "*"
    };
  }

  // DeleteVersion deletes an IAVL tree version from disk. The version can then no
  // longer be accessed.
  rpc DeleteVersion(DeleteVersionRequest) returns (DeleteVersionResponse) {
    option (google.api.http) = {
      post: "/v1/tree/delete_version"
      body: "*"
    };
  }

  // Version returns the IAVL tree version based on the current state.
  rpc Version(google.protobuf.Empty) returns (VersionResponse) {
    option (google.api.http) = {
      get: "/v1/tree/version"
    };
  }

  // Hash returns the IAVL tree root hash based on the current state.
  rpc Hash(google.protobuf.Empty) returns (HashResponse) {
    option (google.api.http) = {
      get: "/v1/tree/hash"
    };
  }
}

// ----------------------------------------------------------------------------
// Request types
// ----------------------------------------------------------------------------

message HasRequest {
  int64 version = 1;
  bytes key = 2;
}

message GetRequest {
  int64 version = 1;
  bytes key = 2;
}

message SetRequest {
  bytes key = 1;
  bytes value = 2;
}

message RemoveRequest {
  bytes key = 1;
}

message DeleteVersionRequest {
  int64 version = 1;
}

// ----------------------------------------------------------------------------
// Response types
// ----------------------------------------------------------------------------

message HasResponse {
  bool result = 1;
}

message GetResponse {
  int64 index = 1;
  bytes value = 2;
}

message SetResponse {
  bool result = 1;
}

message RemoveResponse {
  bytes value = 1;
  bool removed = 2;
}

message SaveVersionResponse {
  bytes root_hash = 1;
  int64 version = 2;
}

message DeleteVersionResponse{
  bytes root_hash = 1;
  int64 version = 2;
}

message VersionResponse {
  int64 version = 1;
}

message HashResponse {
  bytes root_hash = 1;
}

// Tree interface {
//   VersionExists(version int64) bool
//   GetVersioned(key []byte, version int64) (int64, []byte)
//   GetVersionedWithProof(key []byte, version int64) ([]byte, *iavl.RangeProof, error)
//   GetImmutable(version int64) (*iavl.ImmutableTree, error)
// }
